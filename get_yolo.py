from ultralytics import YOLO
import onnxruntime as ort
import numpy as np
import onnx
import numpy as np
import onnxruntime as ort
from PIL import Image
import cv2
import matplotlib.pyplot as plt


model = YOLO("yolov8s-cls.pt")
model.export(format="onnx")
probs = model("original.jpg")[0].probs


print("===================", max_index, max_)

with open("models/synset.txt", "r") as f:
    labels = [l.rstrip() for l in f]

model_path = "models/yolov8s-cls.onnx"
model = onnx.load(model_path)
session = ort.InferenceSession(model.SerializeToString())


def get_image(path, show=False):
    with Image.open(path) as img:
        img = np.array(img.convert("RGB"))
    if show:
        plt.imshow(img)
        plt.axis("off")
    return img


def preprocess(img):
    return cv2.dnn.blobFromImage(
        img, 1 / 255, (224, 224), swapRB=True, mean=(0, 0, 0), crop=True
    )

    img = img / 255.0
    img = cv2.resize(img, (256, 256))
    h, w = img.shape[0], img.shape[1]
    y0 = (h - 224) // 2
    x0 = (w - 224) // 2
    img = img[y0 : y0 + 224, x0 : x0 + 224, :]
    img = (img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]
    img = np.transpose(img, axes=[2, 0, 1])
    img = img.astype(np.float32)
    img = np.expand_dims(img, axis=0)
    return img


def softmax(x):
    f_x = np.exp(x) / np.sum(np.exp(x))
    return f_x


# Post-processing function for ImageNet models
def postprocess(scores):
    """
    Postprocessing with mxnet gluon
    The function takes scores generated by the network and returns the class IDs in decreasing order
    of probability
    """
    return softmax(scores)


def predict(path):
    img = get_image(path, show=True)
    img = preprocess(img)
    ort_inputs = {session.get_inputs()[0].name: img}
    preds = session.run(None, ort_inputs)[0]
    preds = np.squeeze(preds)
    a = np.argsort(preds)[::-1]
    print("class=%s ; probability=%f" % (labels[a[0]], preds[a[0]]))
    return np.argsort(preds)


# Enter path to the inference image below
img_path = "original.jpg"
predict(img_path)
